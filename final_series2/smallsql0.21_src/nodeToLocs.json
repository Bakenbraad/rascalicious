{"nodeToLocsJSON": [{"node" : "declarationStatement(variables(int(),[variable('octet',0,infix(cast(int(),bracket(infix(simpleName('value'),' > >',simpleName('shift')))),'&',number('0xFFFF')))]))","locs" :["smallsql021_src.src.smallsql.database.LongTreeList","smallsql021_src.src.smallsql.database.LongTreeList"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'TYPE_CAT ''),stringLiteral(' 'TYPE_SCHEM ''),stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'CLASS_NAME ''),stringLiteral(' 'DATA_TYPE ''),stringLiteral(' 'REMARKS '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "expressionStatement(methodCall(false,'assertTrue',[infix(infix(simpleName('oldValue'),'+',stringLiteral(' ' < '')),'+',simpleName('newValue')),infix(methodCall(false,simpleName('oldValue'),'compareTo',[simpleName('newValue')]),' <',number('0'))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "return(newObject(simpleType(simpleName('SSResultSet')),[simpleName('st'),methodCall(false,simpleName('Utils'),'createMemoryCommandSelect',[simpleName('con'),simpleName('colNames'),simpleName('data')])]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData"]}, {"node" : "catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([if(infix(simpleName('raFile'),'!=',null()),try(block([expressionStatement(methodCall(false,simpleName('raFile'),'close',[]))]),[catch(parameter(simpleType(simpleName('Exception')),'e2',0),block([expressionStatement(methodCall(false,simpleName('DriverManager'),'println',[methodCall(false,simpleName('e2'),'toString',[])]))]))])),throw(methodCall(false,simpleName('SmallSQLException'),'createFromException',[simpleName('e')]))]))","locs" : ["smallsql021_src.src.smallsql.database.IndexDescription","smallsql021_src.src.smallsql.database.TableView"]}, {"node" : "while(infix(infix(simpleName('oldValue'),'!=',null()),'&&',methodCall(false,simpleName('rs'),'next',[])),block([declarationStatement(variables(simpleType(simpleName('String')),[variable('newValue',0,methodCall(false,simpleName('rs'),'getString',[stringLiteral(' 'v '')]))])),if(infix(simpleName('newValue'),'!=',null()),block([expressionStatement(methodCall(false,'assertTrue',[infix(methodCall(false,simpleName('oldValue'),'compareTo',[simpleName('newValue')]),' >',number('0'))])),expressionStatement(postfix(simpleName('count'),'++'))])),expressionStatement(assignment(simpleName('oldValue'),'=',simpleName('newValue')))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "declarationStatement(variables(int(),[variable('i',0,cast(int(),bracket(infix(simpleName('key'),'%',qualifiedName(simpleName('table'),simpleName('length'))))))]))","locs" : ["smallsql021_src.src.smallsql.database.StorePageMap","smallsql021_src.src.smallsql.database.StorePageMap","smallsql021_src.src.smallsql.database.StorePageMap"]}, {"node" : "if(infix(methodCall(false,simpleName('serializeConnections'),'size',[]),' >',number('0')),block([declarationStatement(variables(simpleType(simpleName('Iterator')),[variable('values',0,methodCall(false,methodCall(false,simpleName('locks'),'values',[]),'iterator',[]))])),while(methodCall(false,simpleName('values'),'hasNext',[]),block([declarationStatement(variables(simpleType(simpleName('TableStorePage')),[variable('lock',0,cast(simpleType(simpleName('TableStorePage')),methodCall(false,simpleName('values'),'next',[])))])),if(infix(qualifiedName(simpleName('lock'),simpleName('con')),'!=',simpleName('con')),return(null()))]))]))","locs" : ["smallsql021_src.src.smallsql.database.Table","smallsql021_src.src.smallsql.database.Table"]}, {"node" : "bracket(infix(infix(infix(simpleName('year'),'%',number('100')),'!=',number('0')),'||',infix(infix(simpleName('year'),'%',number('400')),'==',number('0'))))","locs" : ["smallsql021_src.src.smallsql.database.DateTime","smallsql021_src.src.smallsql.database.DateTime"]}, {"node" : "declarationStatement(variables(arrayType(arrayType(simpleType(simpleName('Object')))),[variable('data',0,newArray(simpleType(simpleName('Object')),[number('0')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData"]}, {"node" : "block([expressionStatement(methodCall(false,'recreateTestTab',[simpleName('stat')])),expressionStatement(methodCall(false,simpleName('stat'),'execute',[infix(infix(stringLiteral(' 'CREATE TABLE  ''),'+',simpleName('TABLE_NAME')),'+',stringLiteral(' ' (id_test INT) ''))])),expressionStatement(methodCall(false,'fail',[]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestLanguage","smallsql021_src.src.smallsql.junit.TestLanguage"]}, {"node" : "method(simpleType(simpleName('String')),'getString',[],[simpleName('Exception')],block([declarationStatement(variables(simpleType(simpleName('Object')),[variable('obj',0,methodCall(false,'getObject',[]))])),if(infix(simpleName('obj'),'==',null()),return(null())),return(methodCall(false,simpleName('obj'),'toString',[]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionFloor","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnFloat","smallsql021_src.src.smallsql.database.ExpressionFunctionAbs"]}, {"node" : "try(block([expressionStatement(assignment(simpleName('value'),'=',methodCall(false,simpleName('Integer'),'parseInt',[methodCall(false,simpleName('token'),'getName',[simpleName('sql')])])))]),[catch(parameter(simpleType(simpleName('Exception')),'e',0),block([throw(methodCall(false,'createSyntaxError',[simpleName('token'),simpleName('MISSING_NUMBERVALUE')]))]))])","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "method(void(),'tearDown',[],[],block([try(block([expressionStatement(methodCall(false,'dropTable',[methodCall(false,simpleName('AllTests'),'getConnection',[]),simpleName('table')]))]),[catch(parameter(simpleType(simpleName('SQLException')),'ex',0),block([expressionStatement(methodCall(false,simpleName('ex'),'printStackTrace',[]))]))])]))","locs" : ["smallsql021_src.src.smallsql.junit.TestAlterTable","smallsql021_src.src.smallsql.junit.TestAlterTable2"]}, {"node" : "class('TestValue',[],[],[field(simpleType(simpleName('String')),[variable('dataType',0)]),field(simpleType(simpleName('Object')),[variable('small',0)]),field(simpleType(simpleName('Object')),[variable('large',0)])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('8'))))))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "method(simpleType(simpleName('MutableNumeric')),'getNumeric',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(null())),return(newObject(simpleType(simpleName('MutableNumeric')),[methodCall(false,'getInt',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnInt","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff"]}, {"node" : "if(infix(simpleName('count'),'!=',simpleName('rowCount')),expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[infix(infix(stringLiteral(' '  Failed: Only  ''),'+',simpleName('count')),'+',stringLiteral(' ' rows were inserted. ''))])),expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[infix(infix(stringLiteral(' '  Test time:  ''),'+',simpleName('time')),'+',stringLiteral(' ' ms ''))])))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('TableStorePage')),[variable('lock',0,newObject(simpleType(simpleName('TableStorePage')),[simpleName('con'),this(),simpleName('LOCK_TAB'),simpleName('page')]))]))","locs" : ["smallsql021_src.src.smallsql.database.Table","smallsql021_src.src.smallsql.database.Table"]}, {"node" : "declarationStatement(variables(char(),[variable('digit',0,conditional(bracket(infix(simpleName('i'),' <',number('0'))),bracket(conditional(infix(simpleName('length'),'==',number('0')),cast(char(),number('1')),number('2'))),bracket(arrayAccess(simpleName('key'),simpleName('i')))))]))","locs" : ["smallsql021_src.src.smallsql.database.Index","smallsql021_src.src.smallsql.database.Index"]}, {"node" : "method(boolean(),'string2boolean',[parameter(simpleType(simpleName('String')),'val',0)],[],block([try(block([return(infix(methodCall(false,simpleName('Double'),'parseDouble',[simpleName('val')]),'!=',number('0')))]),[catch(parameter(simpleType(simpleName('NumberFormatException')),'e',0),block([]))]),return(infix(infix(methodCall(false,stringLiteral(' 'true ''),'equalsIgnoreCase',[simpleName('val')]),'||',methodCall(false,stringLiteral(' 'yes ''),'equalsIgnoreCase',[simpleName('val')])),'||',methodCall(false,stringLiteral(' 't ''),'equalsIgnoreCase',[simpleName('val')])))]))","locs" : ["smallsql021_src.src.smallsql.database.Utils","smallsql021_src.src.smallsql.junit.BasicTestCase"]}, {"node" : "cast(byte(),bracket(infix(bracket(infix(methodCall(false,'hexDigit2int',[arrayAccess(simpleName('hex'),postfix(simpleName('offset'),'++'))]),' < <',number('4'))),'|',methodCall(false,'hexDigit2int',[arrayAccess(simpleName('hex'),postfix(simpleName('offset'),'++'))]))))","locs" : ["smallsql021_src.src.smallsql.database.Utils","smallsql021_src.src.smallsql.database.Utils"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('String')),[variable('message',0,methodCall(false,'translateMsg',[simpleName('messageCode'),newArray(simpleType(simpleName('Object')),[],arrayInitializer([simpleName('param0')]))]))]))","locs" : ["smallsql021_src.src.smallsql.database.SmallSQLException","smallsql021_src.src.smallsql.database.SmallSQLException"]}, {"node" : "throw(methodCall(false,simpleName('SmallSQLException'),'create',[qualifiedName(simpleName('Language'),simpleName('VALUE_CANT_CONVERT')),newArray(simpleType(simpleName('Object')),[],arrayInitializer([methodCall(false,simpleName('SQLTokenizer'),'getKeyWord',[simpleName('dataType')]),stringLiteral(' 'NUMERIC '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('StoreImpl')),[variable('store',0,methodCall(false,simpleName('table'),'getLobStore',[fieldAccess(false,bracket(cast(simpleType(simpleName('TableStorePage')),simpleName('storePage'))),'con'),simpleName('lobFilePos'),qualifiedName(simpleName('SQLTokenizer'),simpleName('SELECT'))]))]))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "method(void(),'tearDown',[],[],block([try(block([declarationStatement(variables(simpleType(simpleName('Connection')),[variable('con',0,methodCall(false,simpleName('AllTests'),'getConnection',[]))])),declarationStatement(variables(simpleType(simpleName('Statement')),[variable('st',0,methodCall(false,simpleName('con'),'createStatement',[]))])),expressionStatement(methodCall(false,simpleName('st'),'execute',[infix(stringLiteral(' 'drop table  ''),'+',simpleName('table'))])),expressionStatement(methodCall(false,simpleName('st'),'close',[]))]),[catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([]))])]))","locs" : ["smallsql021_src.src.smallsql.junit.TestDataTypes","smallsql021_src.src.smallsql.junit.TestOperatoren","smallsql021_src.src.smallsql.junit.TestFunctions","smallsql021_src.src.smallsql.junit.TestMoneyRounding"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'blob ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "method(float(),'getFloat',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(number('0'))),return(methodCall(false,simpleName('Float'),'parseFloat',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('Object'))),[variable('params',0,arrayInitializer([methodCall(false,simpleName('SQLTokenizer'),'getKeyWord',[simpleName('dataType')]),methodCall(false,simpleName('SQLTokenizer'),'getKeyWord',[methodCall(false,'getFunction',[])])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunction","smallsql021_src.src.smallsql.database.ExpressionFunction"]}, {"node" : "expressionStatement(assignment(simpleName('value'),'=',conditional(bracket(simpleName('unique')),cast(simpleType(simpleName('Object')),newObject(simpleType(simpleName('Long')),[simpleName('rowOffset')])),newObject(simpleType(simpleName('LongTreeList')),[simpleName('rowOffset')]))))","locs" : ["smallsql021_src.src.smallsql.database.IndexNode","smallsql021_src.src.smallsql.database.IndexNode"]}, {"node" : "for([declarationExpression(variables(simpleType(simpleName('Iterator')),[variable('itr',0,methodCall(false,simpleName('diff'),'iterator',[]))]))],methodCall(false,simpleName('itr'),'hasNext',[]),[],block([expressionStatement(methodCall(false,simpleName('msgBuf'),'append',[methodCall(false,simpleName('itr'),'next',[])])),if(methodCall(false,simpleName('itr'),'hasNext',[]),expressionStatement(methodCall(false,simpleName('msgBuf'),'append',[characterLiteral(' ', '')])))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestLanguage","smallsql021_src.src.smallsql.junit.TestLanguage"]}, {"node" : "block([expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[])),expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[stringLiteral(' '=================================================================== '')]))])","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "infix(infix(simpleName('src'),'!=',null()),'&&',bracket(infix(prefix('!',bracket(instanceof(simpleName('src'),simpleType(simpleName('ExpressionValue'))))),'||',prefix('!',methodCall(false,bracket(cast(simpleType(simpleName('ExpressionValue')),simpleName('src'))),'isEmpty',[])))))","locs" : ["smallsql021_src.src.smallsql.database.CommandSelect","smallsql021_src.src.smallsql.database.CommandSelect"]}, {"node" : "method(boolean(),'getBoolean',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(booleanLiteral(false))),return(methodCall(false,simpleName('Utils'),'string2boolean',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'binary(100) ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "expressionStatement(methodCall(false,simpleName('System'),'arraycopy',[simpleName('page'),simpleName('valueOffset'),simpleName('bytes'),number('0'),qualifiedName(simpleName('bytes'),simpleName('length'))]))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('page'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('16'))))))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "block([declarationStatement(variables(int(),[variable('idx',0,methodCall(false,simpleName('internalExpressions'),'indexOf',[simpleName('expr')]))])),if(infix(simpleName('idx'),' >=',number('0')),return(simpleName('idx'))),expressionStatement(methodCall(false,simpleName('internalExpressions'),'add',[simpleName('expr')])),return(infix(methodCall(false,simpleName('internalExpressions'),'size',[]),'-',number('1')))])","locs" : ["smallsql021_src.src.smallsql.database.GroupResult","smallsql021_src.src.smallsql.database.GroupResult"]}, {"node" : "while(methodCall(false,simpleName('rs'),'next',[]),block([declarationStatement(variables(simpleType(simpleName('String')),[variable('newValue',0,methodCall(false,simpleName('rs'),'getString',[stringLiteral(' 'v '')]))])),expressionStatement(methodCall(false,'assertTrue',[infix(methodCall(false,simpleName('oldValue'),'compareTo',[simpleName('newValue')]),' <',number('0'))])),expressionStatement(assignment(simpleName('oldValue'),'=',simpleName('newValue'))),expressionStatement(postfix(simpleName('count'),'++'))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'long raw ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "method(long(),'getLong',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(number('0'))),return(methodCall(false,simpleName('Long'),'parseLong',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'PROCEDURE_CAT ''),stringLiteral(' 'PROCEDURE_SCHEM ''),stringLiteral(' 'PROCEDURE_NAME ''),stringLiteral(' ' ''),stringLiteral(' ' ''),stringLiteral(' ' ''),stringLiteral(' 'REMARKS ''),stringLiteral(' 'PROCEDURE_TYPE '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "method(simpleType(simpleName('String')),'bytes2hex',[parameter(arrayType(byte()),'bytes',0)],[],block([declarationStatement(variables(simpleType(simpleName('StringBuffer')),[variable('buf',0,newObject(simpleType(simpleName('StringBuffer')),[infix(qualifiedName(simpleName('bytes'),simpleName('length')),' < <',number('1'))]))])),for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' <',qualifiedName(simpleName('bytes'),simpleName('length'))),[postfix(simpleName('i'),'++')],block([expressionStatement(methodCall(false,simpleName('buf'),'append',[arrayAccess(simpleName('digits'),infix(bracket(infix(arrayAccess(simpleName('bytes'),simpleName('i')),' > >',number('4'))),'&',number('0x0F')))])),expressionStatement(methodCall(false,simpleName('buf'),'append',[arrayAccess(simpleName('digits'),infix(bracket(arrayAccess(simpleName('bytes'),simpleName('i'))),'&',number('0x0F')))]))])),return(methodCall(false,simpleName('buf'),'toString',[]))]))","locs" : ["smallsql021_src.src.smallsql.database.Utils","smallsql021_src.src.smallsql.junit.BasicTestCase"]}, {"node" : "bracket(infix(bracket(infix(arrayAccess(simpleName('page'),postfix(simpleName('offset'),'++')),'&',number('0xFF'))),' < <',number('16')))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "if(infix(qualifiedName(simpleName('listEnum'),simpleName('stack')),' >=',number('3')),block([expressionStatement(assignment(arrayAccess(qualifiedName(simpleName('listEnum'),simpleName('offsetStack')),qualifiedName(simpleName('listEnum'),simpleName('stack'))),'=',simpleName('offset'))),return(simpleName('result'))]))","locs" : ["smallsql021_src.src.smallsql.database.LongTreeList","smallsql021_src.src.smallsql.database.LongTreeList"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('File'))),[variable('file',0,newObject(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('File'))),[infix(simpleName('tableName'),'+',stringLiteral(' '.bin ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "bracket(infix(bracket(infix(arrayAccess(simpleName('page'),postfix(simpleName('offset'),'++')),'&',number('0xFF'))),' < <',number('8')))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "infix(infix(arrayAccess(simpleName('value'),number('0')),'/',arrayAccess(simpleName('scaleDoubleFactor'),simpleName('scale'))),'*',simpleName('signum'))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'date ''),newObject(simpleType(simpleName('Date')),[number('99'),number('1'),number('1')]),newObject(simpleType(simpleName('Date')),[number('99'),number('2'),number('2')])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "catch(parameter(simpleType(simpleName('SQLException')),'e',0),block([expressionStatement(methodCall(false,'assertMessage',[simpleName('e'),infix(infix(stringLiteral(' 'La tabella/vista  ' ''),'+',simpleName('TABLE_NAME')),'+',stringLiteral(' ' ' Ã¨ giÃ u00a0 esistente. ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestLanguage","smallsql021_src.src.smallsql.junit.TestLanguage"]}, {"node" : "infix(infix(simpleName('token'),'!=',null()),'&&',infix(qualifiedName(simpleName('token'),simpleName('value')),'==',qualifiedName(simpleName('SQLTokenizer'),simpleName('POINT'))))","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'varbinary(100) ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' <',simpleName('rowCount')),[postfix(simpleName('i'),'++')],block([expressionStatement(methodCall(false,simpleName('fos'),'write',[simpleName('bytes')]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "try(block([declarationStatement(variables(int(),[variable('maxRows',0,methodCall(false,simpleName('Integer'),'parseInt',[methodCall(false,simpleName('token'),'getName',[simpleName('sql')])]))])),expressionStatement(methodCall(false,simpleName('selCmd'),'setMaxRows',[simpleName('maxRows')]))]),[catch(parameter(simpleType(simpleName('NumberFormatException')),'e',0),block([throw(methodCall(false,'createSyntaxError',[simpleName('token'),qualifiedName(simpleName('Language'),simpleName('STXADD_NOT_NUMBER')),methodCall(false,simpleName('token'),'getName',[simpleName('sql')])]))]))])","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "expressionStatement(assignment(simpleName('rs'),'=',methodCall(false,methodCall(false,simpleName('con'),'getMetaData',[]),'getIndexInfo',[null(),null(),simpleName('table'),booleanLiteral(false),booleanLiteral(false)])))","locs" : ["smallsql021_src.src.smallsql.junit.TestAlterTable2","smallsql021_src.src.smallsql.junit.TestAlterTable2","smallsql021_src.src.smallsql.junit.TestAlterTable2","smallsql021_src.src.smallsql.junit.TestAlterTable2"]}, {"node" : "block([expressionStatement(methodCall(false,simpleName('keyColumnNames'),'add',[methodCall(false,simpleName('column'),'getName',[])])),expressionStatement(methodCall(false,simpleName('keys'),'add',[methodCall(false,simpleName('valueExpress'),'getObject',[])])),break('')])","locs" : ["smallsql021_src.src.smallsql.database.CommandInsert","smallsql021_src.src.smallsql.database.CommandInsert"]}, {"node" : "infix(infix(qualifiedName(simpleName('value'),simpleName('length')),'==',number('1')),'&&',bracket(infix(arrayAccess(simpleName('value'),number('0')),' >',number('0'))))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "infix(infix(qualifiedName(simpleName('value'),simpleName('length')),'==',number('2')),'&&',bracket(infix(arrayAccess(simpleName('value'),number('0')),' >',number('0'))))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "method(long(),'getMoney',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(number('0'))),return(methodCall(false,simpleName('Money'),'parseMoney',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('ResultSet')),[variable('rs',0,methodCall(false,methodCall(false,simpleName('con'),'createStatement',[qualifiedName(simpleName('ResultSet'),simpleName('TYPE_SCROLL_SENSITIVE')),qualifiedName(simpleName('ResultSet'),simpleName('CONCUR_UPDATABLE'))]),'executeQuery',[stringLiteral(' 'Select * from transactions Where 1=0 '')]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions"]}, {"node" : "for([],infix(simpleName('k'),' >=',number('0')),[postfix(simpleName('k'),'--')],if(infix(arrayAccess(simpleName('tmp'),simpleName('k')),'!=',number('0')),break('')))","locs" : ["smallsql021_src.src.smallsql.junit.BasicTestCase","smallsql021_src.src.smallsql.junit.BasicTestCase"]}, {"node" : "if(infix(simpleName('size'),' >=',qualifiedName(simpleName('data'),simpleName('length'))),block([expressionStatement(methodCall(false,'resize',[infix(simpleName('size'),' < <',number('1'))]))]))","locs" : ["smallsql021_src.src.smallsql.database.IndexDescriptions","smallsql021_src.src.smallsql.database.Strings","smallsql021_src.src.smallsql.database.LongList","smallsql021_src.src.smallsql.database.Expressions","smallsql021_src.src.smallsql.database.Expressions","smallsql021_src.src.smallsql.database.ForeignKeys","smallsql021_src.src.smallsql.database.Columns"]}, {"node" : "expressionStatement(assignment(simpleName('store'),'=',methodCall(false,bracket(cast(simpleType(simpleName('StorePageLink')),methodCall(false,simpleName('insertStorePages'),'get',[cast(int(),bracket(infix(simpleName('filePos'),'&',number('0x3FFFFFFFFFFFFFFFL'))))]))),'getStore',[simpleName('table'),simpleName('con'),simpleName('lock')])))","locs" : ["smallsql021_src.src.smallsql.database.TableResult","smallsql021_src.src.smallsql.database.TableResult"]}, {"node" : "expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[infix(infix(stringLiteral(' '  Failed: Only  ''),'+',bracket(infix(simpleName('rowCount'),'-',simpleName('count')))),'+',stringLiteral(' ' rows were deleted. ''))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "expressionStatement(assignment(fieldAccess(false,bracket(cast(simpleType(simpleName('TableStorePage')),qualifiedName(simpleName('newData'),simpleName('storePage')))),'lockType'),'=',qualifiedName(simpleName('TableView'),simpleName('LOCK_INSERT'))))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' <',simpleName('length')),[postfix(simpleName('i'),'++')],block([expressionStatement(assignment(simpleName('result'),'=',infix(bracket(infix(simpleName('result'),' < <',number('8'))),'|',bracket(infix(arrayAccess(simpleName('bytes'),simpleName('i')),'&',number('0xFF'))))))]))","locs" : ["smallsql021_src.src.smallsql.database.Utils","smallsql021_src.src.smallsql.database.Utils"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'SCOPE ''),stringLiteral(' 'COLUMN_NAME ''),stringLiteral(' 'DATA_TYPE ''),stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'COLUMN_SIZE ''),stringLiteral(' 'BUFFER_LENGTH ''),stringLiteral(' 'DECIMAL_DIGITS ''),stringLiteral(' 'PSEUDO_COLUMN '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "method(int(),'getInt',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(number('0'))),return(methodCall(false,simpleName('Integer'),'parseInt',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "if(infix(qualifiedName(simpleName('st'),simpleName('rsType')),'==',qualifiedName(simpleName('ResultSet'),simpleName('TYPE_FORWARD_ONLY'))),throw(methodCall(false,simpleName('SmallSQLException'),'create',[qualifiedName(simpleName('Language'),simpleName('RSET_FWDONLY'))])))","locs" : ["smallsql021_src.src.smallsql.database.SSResultSet","smallsql021_src.src.smallsql.database.SSResultSet"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'tinyint ''),newObject(simpleType(simpleName('Byte')),[cast(byte(),number('3'))]),newObject(simpleType(simpleName('Byte')),[cast(byte(),number('4'))])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "try(block([expressionStatement(methodCall(false,simpleName('rs'),'getString',[stringLiteral(' 'v '')])),expressionStatement(methodCall(false,'fail',[stringLiteral(' 'SQLException  'No current row ' should be throw '')]))]),[catch(parameter(simpleType(simpleName('SQLException')),'ex',0),block([expressionStatement(methodCall(false,'assertSQLException',[stringLiteral(' '01000 ''),number('0'),simpleName('ex')]))]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[variable('details1',0,newObject(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[methodCall(false,simpleName('param1'),'getLong',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('StoreImpl')),[variable('store',0,methodCall(false,simpleName('StoreImpl'),'createStore',[null(),simpleName('storePage'),qualifiedName(simpleName('SQLTokenizer'),simpleName('INSERT')),simpleName('fileOffset')]))]))","locs" : ["smallsql021_src.src.smallsql.database.FileIndexNode","smallsql021_src.src.smallsql.database.FileIndexNode"]}, {"node" : "arrayInitializer([stringLiteral(' 'TABLE_CAT ''),stringLiteral(' 'TABLE_SCHEM ''),stringLiteral(' 'TABLE_NAME ''),stringLiteral(' 'NON_UNIQUE ''),stringLiteral(' 'INDEX_QUALIFIER ''),stringLiteral(' 'INDEX_NAME ''),stringLiteral(' 'TYPE ''),stringLiteral(' 'ORDINAL_POSITION ''),stringLiteral(' 'COLUMN_NAME ''),stringLiteral(' 'ASC_OR_DESC ''),stringLiteral(' 'CARDINALITY ''),stringLiteral(' 'PAGES ''),stringLiteral(' 'FILTER_CONDITION '')])","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "method(double(),'getDouble',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(number('0'))),return(methodCall(false,simpleName('Double'),'parseDouble',[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('PreparedStatement')),[variable('pr',0,methodCall(false,simpleName('con'),'prepareStatement',[infix(infix(stringLiteral(' 'UPDATE  ''),'+',simpleName('tableName')),'+',stringLiteral(' ' SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=? ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'image ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "declarationStatement(variables(int(),[variable('mid',0,infix(simpleName('start'),'+',infix(bracket(infix(simpleName('end'),'-',simpleName('start'))),'/',number('2'))))]))","locs" : ["smallsql021_src.src.smallsql.database.IndexNode","smallsql021_src.src.smallsql.database.IndexNode"]}, {"node" : "expressionStatement(methodCall(false,simpleName('buf'),'append',[conditional(infix(qualifiedName(simpleName('details'),simpleName('hour')),' <',number('12')),stringLiteral(' 'AM ''),stringLiteral(' 'PM ''))]))","locs" : ["smallsql021_src.src.smallsql.database.DateTime","smallsql021_src.src.smallsql.database.DateTime","smallsql021_src.src.smallsql.database.DateTime"]}, {"node" : "if(infix(simpleName('places'),' >',number('0')),block([expressionStatement(assignment(simpleName('value'),'/=',simpleName('factor')))]),block([expressionStatement(assignment(simpleName('value'),'*=',simpleName('factor')))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionRound","smallsql021_src.src.smallsql.database.ExpressionFunctionTruncate"]}, {"node" : "block([try(block([expressionStatement(methodCall(false,methodCall(false,simpleName('con'),'createStatement',[]),'execute',[stringLiteral(' 'Drop Table transactions '')]))]),[catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([expressionStatement(methodCall(false,simpleName('e'),'printStackTrace',[]))]))]),expressionStatement(methodCall(false,simpleName('con'),'setAutoCommit',[booleanLiteral(true)]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions"]}, {"node" : "if(infix(qualifiedName(simpleName('num'),simpleName('scale')),' <',simpleName('scale')),block([expressionStatement(methodCall(false,simpleName('num'),'setScale',[simpleName('scale')]))]),if(infix(qualifiedName(simpleName('num'),simpleName('scale')),' >',simpleName('scale')),block([expressionStatement(methodCall(false,'setScale',[qualifiedName(simpleName('num'),simpleName('scale'))]))])))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'raw(100) ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "if(infix(simpleName('count'),'==',number('0')),block([expressionStatement(methodCall(false,'createTestDataWithClassicInsert',[simpleName('con')])),expressionStatement(assignment(simpleName('rs'),'=',methodCall(false,simpleName('st1'),'executeQuery',[infix(stringLiteral(' 'SELECT count(*) FROM  ''),'+',simpleName('tableName'))]))),expressionStatement(methodCall(false,simpleName('rs'),'next',[])),expressionStatement(assignment(simpleName('count'),'=',methodCall(false,simpleName('rs'),'getInt',[number('1')])))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('page'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('24'))))))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "block([try(block([expressionStatement(methodCall(false,methodCall(false,simpleName('con'),'createStatement',[]),'execute',[stringLiteral(' 'Drop Table transactions '')]))]),[catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([expressionStatement(methodCall(false,simpleName('e'),'printStackTrace',[]))]))])])","locs" : ["smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[variable('details',0,newObject(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[methodCall(false,simpleName('param1'),'getLong',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionHour","smallsql021_src.src.smallsql.database.ExpressionFunctionMonth","smallsql021_src.src.smallsql.database.ExpressionFunctionDayOfYear","smallsql021_src.src.smallsql.database.ExpressionFunctionYear","smallsql021_src.src.smallsql.database.ExpressionFunctionMinute","smallsql021_src.src.smallsql.database.ExpressionFunctionDayOfMonth"]}, {"node" : "if(infix(simpleName('t'),' <',number('0')),block([expressionStatement(assignment(simpleName('t'),'+=',number('86400000'))),expressionStatement(postfix(simpleName('d'),'--'))]))","locs" : ["smallsql021_src.src.smallsql.database.DateTime","smallsql021_src.src.smallsql.database.DateTime"]}, {"node" : "method(arrayType(byte()),'getBytes',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(null())),return(methodCall(false,methodCall(false,'getString',[]),'getBytes',[]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionLCase","smallsql021_src.src.smallsql.database.ExpressionFunctionUCase"]}, {"node" : "catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([expressionStatement(methodCall(false,simpleName('con'),'rollback',[simpleName('savepoint')])),throw(methodCall(false,simpleName('SmallSQLException'),'createFromException',[simpleName('e')]))]))","locs" : ["smallsql021_src.src.smallsql.database.Command","smallsql021_src.src.smallsql.database.CommandSelect","smallsql021_src.src.smallsql.database.CommandSelect","smallsql021_src.src.smallsql.database.CommandSelect"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('FileInputStream'))),[variable('fis',0,newObject(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('FileInputStream'))),[infix(simpleName('tableName'),'+',stringLiteral(' '.bin ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "method(simpleType(simpleName('MutableNumeric')),'getNumeric',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(null())),return(newObject(simpleType(simpleName('MutableNumeric')),[methodCall(false,methodCall(false,'getString',[]),'trim',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnP1StringAndBinary","smallsql021_src.src.smallsql.database.ExpressionFunctionReturnString"]}, {"node" : "if(infix(simpleName('length'),' <',number('0')),throw(methodCall(false,simpleName('SmallSQLException'),'create',[qualifiedName(simpleName('Language'),simpleName('INSERT_INVALID_LEN')),newObject(simpleType(simpleName('Integer')),[simpleName('length')])])))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionInsert","smallsql021_src.src.smallsql.database.ExpressionFunctionInsert"]}, {"node" : "if(infix(simpleName('updateCount'),'!=',number('1')),block([expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[infix(infix(stringLiteral(' '  Failed: Update count should be 1 but it is  ''),'+',simpleName('updateCount')),'+',stringLiteral(' '. ''))])),return()]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "try(block([expressionStatement(methodCall(false,methodCall(false,simpleName('con'),'createStatement',[]),'execute',[stringLiteral(' 'Drop Table transactions '')]))]),[catch(parameter(simpleType(simpleName('Throwable')),'e',0),block([expressionStatement(methodCall(false,simpleName('e'),'printStackTrace',[]))]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions"]}, {"node" : "block([declarationStatement(variables(simpleType(simpleName('Statement')),[variable('st',0,methodCall(false,simpleName('con'),'createStatement',[]))])),expressionStatement(methodCall(false,simpleName('st'),'execute',[infix(stringLiteral(' 'DELETE FROM  ''),'+',simpleName('tableName'))])),expressionStatement(methodCall(false,simpleName('st'),'close',[]))])","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "newObject(simpleType(simpleName('HashMap')),[cast(int(),bracket(infix(qualifiedName(simpleName('MESSAGES'),simpleName('length')),'/',number('0.7'))))])","locs" : ["smallsql021_src.src.smallsql.database.language.Language","smallsql021_src.src.smallsql.database.language.Language"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'timestamp ''),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('1'),number('1'),number('0'),number('0'),number('0'),number('0')]),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('2'),number('2'),number('0'),number('0'),number('0'),number('0')])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "method(void(),'setAlias',[parameter(simpleType(simpleName('String')),'alias',0)],[],block([expressionStatement(assignment(fieldAccess(false,this(),'alias'),'=',simpleName('alias')))]))","locs" : ["smallsql021_src.src.smallsql.database.Expression","smallsql021_src.src.smallsql.database.TableViewResult"]}, {"node" : "declarationStatement(variables(char(),[variable('digit',0,cast(char(),bracket(infix(simpleName('key'),' > >',bracket(infix(simpleName('i'),' < <',number('4')))))))]))","locs" : ["smallsql021_src.src.smallsql.database.Index","smallsql021_src.src.smallsql.database.Index"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('PreparedStatement')),[variable('pr',0,methodCall(false,simpleName('con'),'prepareStatement',[infix(infix(stringLiteral(' 'INSERT into  ''),'+',simpleName('table')),'+',stringLiteral(' '(a,b) Values(?,?) ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'smallint ''),newObject(simpleType(simpleName('Short')),[cast(short(),number('3'))]),newObject(simpleType(simpleName('Short')),[cast(short(),number('4'))])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('Statement')),[variable('st',0,methodCall(false,simpleName('con'),'createStatement',[qualifiedName(simpleName('ResultSet'),simpleName('TYPE_SCROLL_SENSITIVE')),qualifiedName(simpleName('ResultSet'),simpleName('CONCUR_UPDATABLE'))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestResultSet","smallsql021_src.src.smallsql.junit.TestResultSet","smallsql021_src.src.smallsql.junit.TestResultSet","smallsql021_src.src.smallsql.junit.TestResultSet","smallsql021_src.src.smallsql.junit.TestResultSet","smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestStatement","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable","smallsql021_src.src.smallsql.junit.TestScrollable"]}, {"node" : "expressionStatement(assignment(simpleName('offset'),'+=',methodCall(false,simpleName('column'),'initAutoIncrement',[qualifiedName(simpleName('storePage'),simpleName('raFile')),infix(simpleName('filePos'),'+',simpleName('offset'))])))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('24'))))))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "if(infix(infix(simpleName('token2'),'!=',null()),'&&',infix(qualifiedName(simpleName('token2'),simpleName('value')),'==',qualifiedName(simpleName('SQLTokenizer'),simpleName('POINT')))),block([expressionStatement(methodCall(false,simpleName('expr'),'setNameAfterTableAlias',[methodCall(false,'nextIdentifier',[])]))]),block([expressionStatement(methodCall(false,'previousToken',[]))]))","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "block([declarationStatement(variables(simpleType(simpleName('Money')),[variable('money',0,newObject(simpleType(simpleName('Money')),[]))])),expressionStatement(assignment(qualifiedName(simpleName('money'),simpleName('value')),'=',simpleName('value'))),return(simpleName('money'))])","locs" : ["smallsql021_src.src.smallsql.database.Money","smallsql021_src.src.smallsql.database.Money"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('StoreImpl')),[variable('store',0,methodCall(false,simpleName('StoreImpl'),'createStore',[null(),simpleName('storePage'),qualifiedName(simpleName('SQLTokenizer'),simpleName('SELECT')),simpleName('offset')]))]))","locs" : ["smallsql021_src.src.smallsql.database.FileIndexNode","smallsql021_src.src.smallsql.database.View"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'TABLE_CAT ''),stringLiteral(' 'TABLE_SCHEM ''),stringLiteral(' 'TABLE_NAME ''),stringLiteral(' 'TABLE_TYPE ''),stringLiteral(' 'REMARKS ''),stringLiteral(' 'TYPE_CAT ''),stringLiteral(' 'TYPE_SCHEM ''),stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'SELF_REFERENCING_COL_NAME ''),stringLiteral(' 'REF_GENERATION '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[variable('details2',0,newObject(simpleType(qualifiedName(simpleName('DateTime'),simpleName('Details'))),[methodCall(false,simpleName('param2'),'getLong',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampAdd","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampAdd","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampAdd","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff"]}, {"node" : "bracket(infix(bracket(infix(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'&',number('0xFF'))),' < <',number('8')))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "return(methodCall(false,simpleName('Utils'),'double2long',[infix(infix(simpleName('temp'),'/',arrayAccess(simpleName('scaleDoubleFactor'),simpleName('scale'))),'*',simpleName('signum'))]))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "declarationStatement(variables(long(),[variable('temp',0,infix(bracket(infix(bracket(cast(long(),arrayAccess(simpleName('value'),number('0')))),' < <',number('32'))),'|',bracket(infix(arrayAccess(simpleName('value'),number('1')),'&',number('0xFFFFFFFFL')))))]))","locs" : ["smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric","smallsql021_src.src.smallsql.database.MutableNumeric"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'time ''),newObject(simpleType(simpleName('Time')),[number('9'),number('1'),number('1')]),newObject(simpleType(simpleName('Time')),[number('9'),number('2'),number('2')])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "block([if(infix(simpleName('idx'),' >=',simpleName('size')),throw(newObject(simpleType(simpleName('IndexOutOfBoundsException')),[infix(infix(infix(stringLiteral(' 'Index:  ''),'+',simpleName('idx')),'+',stringLiteral(' ', Size:  '')),'+',simpleName('size'))]))),return(arrayAccess(simpleName('data'),simpleName('idx')))])","locs" : ["smallsql021_src.src.smallsql.database.DataSources","smallsql021_src.src.smallsql.database.Expressions","smallsql021_src.src.smallsql.database.LongList"]}, {"node" : "infix(infix(infix(characterLiteral(' 'S ''),' < <',number('24')),'|',infix(characterLiteral(' 'Q ''),' < <',number('16'))),'|',infix(characterLiteral(' 'L ''),' < <',number('8')))","locs" : ["smallsql021_src.src.smallsql.database.IndexDescription","smallsql021_src.src.smallsql.database.TableView","smallsql021_src.src.smallsql.database.TableView"]}, {"node" : "method(boolean(),'isNull',[],[simpleName('Exception')],block([return(infix(infix(methodCall(false,simpleName('param1'),'isNull',[]),'||',methodCall(false,simpleName('param2'),'isNull',[])),'||',methodCall(false,simpleName('param3'),'isNull',[])))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReplace","smallsql021_src.src.smallsql.database.ExpressionFunctionSubstring"]}, {"node" : "declarationStatement(variables(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('FileOutputStream'))),[variable('fos',0,newObject(simpleType(qualifiedName(qualifiedName(simpleName('java'),simpleName('io')),simpleName('FileOutputStream'))),[infix(simpleName('tableName'),'+',stringLiteral(' '.bin ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'smalldatetime ''),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('1'),number('1'),number('0'),number('0'),number('0'),number('0')]),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('2'),number('2'),number('0'),number('0'),number('0'),number('0')])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "expressionStatement(methodCall(false,simpleName('nodeStack'),'push',[newObject(simpleType(simpleName('IndexNodeScrollStatus')),[simpleName('node'),qualifiedName(simpleName('status'),simpleName('asc')),simpleName('scroll'),simpleName('level')])]))","locs" : ["smallsql021_src.src.smallsql.database.IndexScrollStatus","smallsql021_src.src.smallsql.database.IndexScrollStatus"]}, {"node" : "bracket(infix(bracket(infix(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'&',number('0xFF'))),' < <',number('24')))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "bracket(infix(bracket(infix(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'&',number('0xFF'))),' < <',number('16')))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'longvarbinary ''),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('1')])),newArray(byte(),[],arrayInitializer([number('12'),number('45'),number('2'),number('56'),number('89')]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "infix(bracket(infix(infix(simpleName('nextEntry'),'==',number('0')),'&&',prefix('!',simpleName('firstNode')))),'||',infix(simpleName('nextEntry'),' >',simpleName('octet')))","locs" : ["smallsql021_src.src.smallsql.database.LongTreeList","smallsql021_src.src.smallsql.database.LongTreeList"]}, {"node" : "declarationStatement(variables(int(),[variable('shift',0,infix(bracket(infix(number('3'),'-',qualifiedName(simpleName('listEnum'),simpleName('stack')))),' < <',number('4')))]))","locs" : ["smallsql021_src.src.smallsql.database.LongTreeList","smallsql021_src.src.smallsql.database.LongTreeList"]}, {"node" : "if(prefix('!',simpleName('wasWhiteSpace')),block([expressionStatement(methodCall(false,simpleName('tokens'),'add',[newObject(simpleType(simpleName('SQLToken')),[simpleName('value'),simpleName('tokenStart'),simpleName('i')])])),expressionStatement(assignment(simpleName('value'),'=',number('0')))]))","locs" : ["smallsql021_src.src.smallsql.database.SQLTokenizer","smallsql021_src.src.smallsql.database.SQLTokenizer"]}, {"node" : "declarationStatement(variables(arrayType(arrayType(simpleType(simpleName('Object')))),[variable('result',0,newArray(simpleType(simpleName('Object')),[methodCall(false,simpleName('rows'),'size',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.Database","smallsql021_src.src.smallsql.database.Database","smallsql021_src.src.smallsql.database.Database","smallsql021_src.src.smallsql.database.Database","smallsql021_src.src.smallsql.database.Database"]}, {"node" : "method(simpleType(simpleName('Object')),'getObject',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(null())),return(methodCall(false,simpleName('Utils'),'getInteger',[methodCall(false,'getInt',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnInt","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff"]}, {"node" : "block([if(infix(simpleName('idx'),' >=',simpleName('size')),throw(newObject(simpleType(simpleName('IndexOutOfBoundsException')),[infix(infix(infix(stringLiteral(' 'Column index:  ''),'+',simpleName('idx')),'+',stringLiteral(' ', Size:  '')),'+',simpleName('size'))]))),return(arrayAccess(simpleName('data'),simpleName('idx')))])","locs" : ["smallsql021_src.src.smallsql.database.IndexDescriptions","smallsql021_src.src.smallsql.database.Strings","smallsql021_src.src.smallsql.database.ForeignKeys","smallsql021_src.src.smallsql.database.Columns"]}, {"node" : "if(infix(simpleName('failed'),'==',null()),block([expressionStatement(assignment(simpleName('failed'),'=',newObject(simpleType(simpleName('BatchUpdateException')),[methodCall(false,simpleName('ex'),'getMessage',[]),methodCall(false,simpleName('ex'),'getSQLState',[]),methodCall(false,simpleName('ex'),'getErrorCode',[]),simpleName('result')]))),expressionStatement(methodCall(false,simpleName('failed'),'initCause',[simpleName('ex')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSPreparedStatement","smallsql021_src.src.smallsql.database.SSStatement"]}, {"node" : "method(void(),'beforeFirst',[],[simpleName('Exception')],block([expressionStatement(methodCall(false,simpleName('rowSource'),'beforeFirst',[])),expressionStatement(assignment(simpleName('row'),'=',number('0')))]))","locs" : ["smallsql021_src.src.smallsql.database.Distinct","smallsql021_src.src.smallsql.database.Where"]}, {"node" : "if(infix(simpleName('length'),' <',number('0')),throw(methodCall(false,simpleName('SmallSQLException'),'create',[qualifiedName(simpleName('Language'),simpleName('SUBSTR_INVALID_LEN')),newObject(simpleType(simpleName('Integer')),[simpleName('length')])])))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionSubstring","smallsql021_src.src.smallsql.database.ExpressionFunctionSubstring"]}, {"node" : "block([if(methodCall(false,simpleName('expr'),'isNull',[]),expressionStatement(assignment(simpleName('dataType'),'=',methodCall(false,simpleName('expr'),'getDataType',[]))),expressionStatement(methodCall(false,'initValue',[simpleName('expr')])))])","locs" : ["smallsql021_src.src.smallsql.database.ExpressionValue","smallsql021_src.src.smallsql.database.ExpressionValue"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'DATA_TYPE ''),stringLiteral(' 'PRECISION ''),stringLiteral(' 'LITERAL_PREFIX ''),stringLiteral(' 'LITERAL_SUFFIX ''),stringLiteral(' 'CREATE_PARAMS ''),stringLiteral(' 'NULLABLE ''),stringLiteral(' 'CASE_SENSITIVE ''),stringLiteral(' 'SEARCHABLE ''),stringLiteral(' 'UNSIGNED_ATTRIBUTE ''),stringLiteral(' 'FIXED_PREC_SCALE ''),stringLiteral(' 'AUTO_INCREMENT ''),stringLiteral(' 'LOCAL_TYPE_NAME ''),stringLiteral(' 'MINIMUM_SCALE ''),stringLiteral(' 'MAXIMUM_SCALE ''),stringLiteral(' 'SQL_DATA_TYPE ''),stringLiteral(' 'SQL_DATETIME_SUB ''),stringLiteral(' 'NUM_PREC_RADIX '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "if(infix(simpleName('newValue'),'!=',null()),block([expressionStatement(methodCall(false,'assertTrue',[infix(methodCall(false,simpleName('oldValue'),'compareTo',[simpleName('newValue')]),' >',number('0'))])),expressionStatement(postfix(simpleName('count'),'++'))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('StorePage')),[variable('storePage',0,newObject(simpleType(simpleName('StorePage')),[null(),prefix('-',number('1')),simpleName('file'),simpleName('offset')]))]))","locs" : ["smallsql021_src.src.smallsql.database.FileIndexNode","smallsql021_src.src.smallsql.database.FileIndexNode"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'byte ''),newObject(simpleType(simpleName('Byte')),[cast(byte(),number('3'))]),newObject(simpleType(simpleName('Byte')),[cast(byte(),number('4'))])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "expressionStatement(assignment(arrayAccess(qualifiedName(simpleName('listEnum'),simpleName('offsetStack')),qualifiedName(simpleName('listEnum'),simpleName('stack'))),'=',infix(simpleName('offset'),'+',simpleName('pointerSize'))))","locs" : ["smallsql021_src.src.smallsql.database.LongTreeList","smallsql021_src.src.smallsql.database.LongTreeList"]}, {"node" : "expressionStatement(methodCall(false,'assertRSMetaData',[simpleName('rs'),newArray(simpleType(simpleName('String')),[],arrayInitializer([stringLiteral(' 'a ''),stringLiteral(' 'b '')])),newArray(int(),[],arrayInitializer([qualifiedName(simpleName('Types'),simpleName('VARCHAR')),qualifiedName(simpleName('Types'),simpleName('VARCHAR'))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestAlterTable2","smallsql021_src.src.smallsql.junit.TestAlterTable2"]}, {"node" : "method(simpleType(simpleName('String')),'getString',[],[simpleName('Exception')],block([if(methodCall(false,'isNull',[]),return(null())),return(methodCall(false,simpleName('String'),'valueOf',[methodCall(false,'getInt',[])]))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionReturnInt","smallsql021_src.src.smallsql.database.ExpressionFunctionTimestampDiff"]}, {"node" : "if(infix(qualifiedName(simpleName('token'),simpleName('value')),'==',qualifiedName(simpleName('SQLTokenizer'),simpleName('OUTER'))),expressionStatement(assignment(simpleName('token'),'=',methodCall(false,'nextToken',[simpleName('MISSING_JOIN')]))))","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('16'))))))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('Statement')),[variable('st',0,methodCall(false,simpleName('con'),'createStatement',[qualifiedName(simpleName('ResultSet'),simpleName('TYPE_SCROLL_SENSITIVE')),qualifiedName(simpleName('ResultSet'),simpleName('CONCUR_READ_ONLY'))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.TestOther"]}, {"node" : "block([try(block([declarationStatement(variables(simpleType(simpleName('Expression')),[variable('expr',0,methodCall(false,'getValue',[simpleName('i')]))])),expressionStatement(assignment(simpleName('wasNull'),'=',methodCall(false,simpleName('expr'),'isNull',[]))),return(methodCall(false,simpleName('expr'),'getLong',[]))]),[catch(parameter(simpleType(simpleName('Exception')),'e',0),block([throw(methodCall(false,simpleName('SmallSQLException'),'createFromException',[simpleName('e')]))]))])])","locs" : ["smallsql021_src.src.smallsql.database.SSCallableStatement","smallsql021_src.src.smallsql.database.SSCallableStatement"]}, {"node" : "bracket(cast(long(),bracket(infix(arrayAccess(simpleName('puffer'),postfix(simpleName('offset'),'++')),'&',number('0xFF')))))","locs" : ["smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream","smallsql021_src.src.smallsql.database.MemoryStream"]}, {"node" : "field(arrayType(char()),[variable('digits',0,arrayInitializer([characterLiteral(' '0 ''),characterLiteral(' '1 ''),characterLiteral(' '2 ''),characterLiteral(' '3 ''),characterLiteral(' '4 ''),characterLiteral(' '5 ''),characterLiteral(' '6 ''),characterLiteral(' '7 ''),characterLiteral(' '8 ''),characterLiteral(' '9 ''),characterLiteral(' 'A ''),characterLiteral(' 'B ''),characterLiteral(' 'C ''),characterLiteral(' 'D ''),characterLiteral(' 'E ''),characterLiteral(' 'F '')]))])","locs" : ["smallsql021_src.src.smallsql.database.Utils","smallsql021_src.src.smallsql.junit.BasicTestCase"]}, {"node" : "infix(methodCall(false,'getDataType',[methodCall(false,simpleName('right'),'getDataType',[]),qualifiedName(simpleName('SQLTokenizer'),simpleName('INT'))]),'==',qualifiedName(simpleName('SQLTokenizer'),simpleName('INT')))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionArithmetic","smallsql021_src.src.smallsql.database.ExpressionArithmetic"]}, {"node" : "methodCall(false,'a',[stringLiteral(' 'datetime ''),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('1'),number('1'),number('0'),number('0'),number('0'),number('0')]),newObject(simpleType(simpleName('Timestamp')),[number('99'),number('2'),number('2'),number('0'),number('0'),number('0'),number('0')])])","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'TABLE_CAT ''),stringLiteral(' 'TABLE_SCHEM ''),stringLiteral(' 'TABLE_NAME ''),stringLiteral(' 'COLUMN_NAME ''),stringLiteral(' 'DATA_TYPE ''),stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'COLUMN_SIZE ''),stringLiteral(' 'BUFFER_LENGTH ''),stringLiteral(' 'DECIMAL_DIGITS ''),stringLiteral(' 'NUM_PREC_RADIX ''),stringLiteral(' 'NULLABLE ''),stringLiteral(' 'REMARKS ''),stringLiteral(' 'COLUMN_DEF ''),stringLiteral(' 'SQL_DATA_TYPE ''),stringLiteral(' 'SQL_DATETIME_SUB ''),stringLiteral(' 'CHAR_OCTET_LENGTH ''),stringLiteral(' 'ORDINAL_POSITION ''),stringLiteral(' 'IS_NULLABLE '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "if(infix(simpleName('idx'),' >=',simpleName('size')),throw(newObject(simpleType(simpleName('IndexOutOfBoundsException')),[infix(infix(infix(stringLiteral(' 'Index:  ''),'+',simpleName('idx')),'+',stringLiteral(' ', Size:  '')),'+',simpleName('size'))])))","locs" : ["smallsql021_src.src.smallsql.database.LongList","smallsql021_src.src.smallsql.database.LongLongList","smallsql021_src.src.smallsql.database.LongLongList","smallsql021_src.src.smallsql.database.Expressions","smallsql021_src.src.smallsql.database.DataSources"]}, {"node" : "block([declarationStatement(variables(simpleType(simpleName('Iterator')),[variable('values',0,methodCall(false,methodCall(false,simpleName('locks'),'values',[]),'iterator',[]))])),while(methodCall(false,simpleName('values'),'hasNext',[]),block([declarationStatement(variables(simpleType(simpleName('TableStorePage')),[variable('lock',0,cast(simpleType(simpleName('TableStorePage')),methodCall(false,simpleName('values'),'next',[])))])),if(infix(qualifiedName(simpleName('lock'),simpleName('con')),'!=',simpleName('con')),return(null()))]))])","locs" : ["smallsql021_src.src.smallsql.database.Table","smallsql021_src.src.smallsql.database.Table","smallsql021_src.src.smallsql.database.Table"]}, {"node" : "block([expressionStatement(assignment(simpleName('oldValue'),'=',methodCall(false,simpleName('rs'),'getBoolean',[stringLiteral(' 'b '')]))),expressionStatement(methodCall(false,'assertFalse',[methodCall(false,simpleName('rs'),'wasNull',[])])),expressionStatement(postfix(simpleName('count'),'++'))])","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "if(infix(simpleName('places'),' >',number('0')),block([for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' <',simpleName('places')),[postfix(simpleName('i'),'++')],block([expressionStatement(assignment(simpleName('factor'),'*=',number('10')))])),expressionStatement(assignment(simpleName('value'),'*=',simpleName('factor')))]),block([for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' >',simpleName('places')),[postfix(simpleName('i'),'--')],block([expressionStatement(assignment(simpleName('factor'),'*=',number('10')))])),expressionStatement(assignment(simpleName('value'),'/=',simpleName('factor')))]))","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionRound","smallsql021_src.src.smallsql.database.ExpressionFunctionTruncate"]}, {"node" : "block([expressionStatement(methodCall(false,'dropTable',[simpleName('con1'),stringLiteral(' 'transactions '')])),expressionStatement(methodCall(false,simpleName('con1'),'setAutoCommit',[booleanLiteral(true)])),expressionStatement(methodCall(false,simpleName('con2'),'close',[]))])","locs" : ["smallsql021_src.src.smallsql.junit.TestTransactions","smallsql021_src.src.smallsql.junit.TestTransactions"]}, {"node" : "if(infix(qualifiedName(simpleName('status'),simpleName('nodeValue')),'!=',null()),block([if(instanceof(qualifiedName(simpleName('status'),simpleName('nodeValue')),simpleType(simpleName('IndexNode'))),block([expressionStatement(postfix(simpleName('level'),'++')),expressionStatement(methodCall(false,simpleName('nodeStack'),'push',[newObject(simpleType(simpleName('IndexNodeScrollStatus')),[cast(simpleType(simpleName('IndexNode')),qualifiedName(simpleName('status'),simpleName('nodeValue'))),bracket(infix(methodCall(false,methodCall(false,simpleName('expressions'),'get',[simpleName('level')]),'getAlias',[]),'!=',qualifiedName(simpleName('SQLTokenizer'),simpleName('DESC_STR')))),simpleName('scroll'),simpleName('level')])])),continue()]),return(methodCall(false,'getReturnValue',[qualifiedName(simpleName('status'),simpleName('nodeValue'))])))]))","locs" : ["smallsql021_src.src.smallsql.database.IndexScrollStatus","smallsql021_src.src.smallsql.database.IndexScrollStatus"]}, {"node" : "if(infix(infix(simpleName('i'),'+',number('1')),'==',simpleName('count')),return(methodCall(false,simpleName('page'),'getValue',[])),expressionStatement(assignment(simpleName('page'),'=',cast(simpleType(simpleName('IndexNode')),methodCall(false,simpleName('page'),'getValue',[])))))","locs" : ["smallsql021_src.src.smallsql.database.Index","smallsql021_src.src.smallsql.database.Index"]}, {"node" : "catch(parameter(simpleType(simpleName('SQLException')),'e',0),block([expressionStatement(methodCall(false,simpleName('out'),'println',[infix(infix(stringLiteral(' 'REGULAR:  ''),'+',methodCall(false,simpleName('e'),'getMessage',[])),'+',characterLiteral(' '  n ''))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestTokenizer","smallsql021_src.src.smallsql.junit.TestTokenizer"]}, {"node" : "catch(parameter(simpleType(simpleName('Exception')),'e',0),block([expressionStatement(methodCall(false,qualifiedName(simpleName('System'),simpleName('out')),'println',[infix(stringLiteral(' '  Failed: ''),'+',simpleName('e'))]))]))","locs" : ["smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest","smallsql021_src.src.smallsql.junit.BenchTest"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'PROCEDURE_CAT ''),stringLiteral(' 'PROCEDURE_SCHEM ''),stringLiteral(' 'PROCEDURE_NAME ''),stringLiteral(' 'COLUMN_NAME ''),stringLiteral(' 'COLUMN_TYPE ''),stringLiteral(' 'DATA_TYPE ''),stringLiteral(' 'TYPE_NAME ''),stringLiteral(' 'PRECISION ''),stringLiteral(' 'LENGTH ''),stringLiteral(' 'SCALE ''),stringLiteral(' 'RADIX ''),stringLiteral(' 'NULLABLE ''),stringLiteral(' 'REMARKS '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}, {"node" : "while(methodCall(false,simpleName('rs'),'next',[]),block([expressionStatement(methodCall(false,'assertTrue',[infix(methodCall(false,simpleName('oldValue'),'compareTo',[cast(simpleType(simpleName('Integer')),methodCall(false,simpleName('rs'),'getObject',[stringLiteral(' 'i '')]))]),' <',number('0'))])),expressionStatement(assignment(simpleName('oldValue'),'=',cast(simpleType(simpleName('Integer')),methodCall(false,simpleName('rs'),'getObject',[stringLiteral(' 'i '')])))),expressionStatement(postfix(simpleName('count'),'++'))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestOrderBy","smallsql021_src.src.smallsql.junit.TestOrderBy"]}, {"node" : "method(simpleType(simpleName('TestValue')),'a',[parameter(simpleType(simpleName('String')),'dataType',0),parameter(simpleType(simpleName('Object')),'small',0),parameter(simpleType(simpleName('Object')),'large',0)],[],block([declarationStatement(variables(simpleType(simpleName('TestValue')),[variable('value',0,newObject(simpleType(simpleName('TestValue')),[]))])),expressionStatement(assignment(qualifiedName(simpleName('value'),simpleName('dataType')),'=',simpleName('dataType'))),expressionStatement(assignment(qualifiedName(simpleName('value'),simpleName('small')),'=',simpleName('small'))),expressionStatement(assignment(qualifiedName(simpleName('value'),simpleName('large')),'=',simpleName('large'))),return(simpleName('value'))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestJoins","smallsql021_src.src.smallsql.junit.TestOperatoren"]}, {"node" : "block([declarationStatement(variables(arrayType(byte()),[variable('buffer',0,newArray(byte(),[simpleName('length')]))])),expressionStatement(methodCall(false,simpleName('System'),'arraycopy',[simpleName('bytes'),number('0'),simpleName('buffer'),number('0'),methodCall(false,simpleName('Math'),'min',[qualifiedName(simpleName('bytes'),simpleName('length')),simpleName('length')])])),return(simpleName('buffer'))])","locs" : ["smallsql021_src.src.smallsql.database.ExpressionFunctionConvert","smallsql021_src.src.smallsql.database.ExpressionFunctionConvert"]}, {"node" : "expressionStatement(assignment(arrayAccess(simpleName('page'),postfix(simpleName('offset'),'++')),'=',cast(byte(),bracket(infix(simpleName('value'),' > >',number('8'))))))","locs" : ["smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl","smallsql021_src.src.smallsql.database.StoreImpl"]}, {"node" : "for([declarationExpression(variables(int(),[variable('i',0,number('0'))]))],infix(simpleName('i'),' <',methodCall(false,simpleName('threadList'),'size',[])),[postfix(simpleName('i'),'++')],block([declarationStatement(variables(simpleType(simpleName('Thread')),[variable('thread',0,cast(simpleType(simpleName('Thread')),methodCall(false,simpleName('threadList'),'get',[simpleName('i')])))])),expressionStatement(methodCall(false,simpleName('thread'),'join',[number('5000')]))]))","locs" : ["smallsql021_src.src.smallsql.junit.TestThreads","smallsql021_src.src.smallsql.junit.TestThreads","smallsql021_src.src.smallsql.junit.TestThreads"]}, {"node" : "declarationStatement(variables(simpleType(simpleName('String')),[variable('message',0,infix(infix(infix(infix(stringLiteral(' 'Check DisplaySize:  ''),'+',simpleName('expectedLen')),'+',stringLiteral(' '!= '')),'+',qualifiedName(simpleName('Integer'),simpleName('MAX_VALUE'))),'+',stringLiteral(' ') '')))]))","locs" : ["smallsql021_src.src.smallsql.junit.BasicTestCase","smallsql021_src.src.smallsql.junit.BasicTestCase"]}, {"node" : "declarationStatement(variables(int(),[variable('length',0,infix(infix(qualifiedName(simpleName('last'),simpleName('offset')),'+',qualifiedName(simpleName('last'),simpleName('length'))),'-',simpleName('offset')))]))","locs" : ["smallsql021_src.src.smallsql.database.SQLParser","smallsql021_src.src.smallsql.database.SQLParser"]}, {"node" : "declarationStatement(variables(arrayType(simpleType(simpleName('String'))),[variable('colNames',0,arrayInitializer([stringLiteral(' 'PKTABLE_CAT ''),stringLiteral(' 'PKTABLE_SCHEM ''),stringLiteral(' 'PKTABLE_NAME ''),stringLiteral(' 'PKCOLUMN_NAME ''),stringLiteral(' 'FKTABLE_CAT ''),stringLiteral(' 'FKTABLE_SCHEM ''),stringLiteral(' 'FKTABLE_NAME ''),stringLiteral(' 'FKCOLUMN_NAME ''),stringLiteral(' 'KEY_SEQ ''),stringLiteral(' 'UPDATE_RULE ''),stringLiteral(' 'DELETE_RULE ''),stringLiteral(' 'FK_NAME ''),stringLiteral(' 'PK_NAME ''),stringLiteral(' 'DEFERRABILITY '')]))]))","locs" : ["smallsql021_src.src.smallsql.database.SSDatabaseMetaData","smallsql021_src.src.smallsql.junit.TestDBMetaData"]}] }